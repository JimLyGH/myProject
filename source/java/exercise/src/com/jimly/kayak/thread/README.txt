demo1	多线程之线程池案例
demo2	Join方法应用场景以及CAS操作中ABA问题解决方案
demo3	多线程的两种实现(继承Thread类和实现Runnable接口)

注：对于单CPU来说,多线程提高的是效率而不是时间.
	一个很费时操作(Eg:磁盘IO)的任务在执行时,这个时候可以开多线程,让其他线程去处理其他的任务.
	例如:读取磁盘文件时,磁盘IO是一个很费时间,但是不耗CPU计算的工作.
		读取磁盘数据的性能瓶颈是IO,而不是CPU,如果开多个线程去读取磁盘数据的话,并不会提高效率,
		然而,如果一个线程读取磁盘数据,一个线程处理数据,这样肯定比单个线程读取数据,然后处理效率高.
		因为两个线程的时候充分利用了CPU等待磁盘IO的空闲时间.

demo3
实现Runnable接口相对于扩展Thread类来说,具有无可比拟的优势.
这种方式不仅有利于程序的健壮性,使代码能够被多个线程共享,而且代码和数据资源相对独立,从而特别适合多个具有相同代码的线程去处理同一资源的情况.
这样一来,线程、代码和数据资源三者有效分离,很好地体现了面向对象程序设计的思想.
因此,几乎所有的多线程程序都是通过实现Runnable接口的方式来完成的.		